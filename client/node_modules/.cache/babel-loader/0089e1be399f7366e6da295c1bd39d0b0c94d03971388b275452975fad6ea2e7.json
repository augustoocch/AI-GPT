{"ast":null,"code":"var _jsxFileName = \"/Users/augustoocchiuzzi/Desktop/AUGUSTO/PROGRAMACION/NetBeansProjects/arquant/chatGpt/arquantGPT/client/src/App.js\",\n  _s = $RefreshSig$();\nimport arquant from './img/logo-b.svg';\nimport chatgptimg from './img/chatgpt.svg';\nimport logochat from './img/logochat.png';\nimport { useState, useEffect } from 'react';\nimport './css/App.css';\nimport './css/normalize.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    getEngines();\n  }, []);\n\n  //Add state for input and chat log\n\n  const [input, setInput] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [currentModel, setCurrentModel] = useState(\"ada\");\n  const [temperature, setCurrentTemp] = useState(\"0\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"CÃ³mo puedo ayudarte hoy?\"\n  }]);\n\n  //Clear chat\n  function clearChat() {\n    setChatLog([]);\n  }\n  function getEngines() {\n    fetch(\"http://localhost:3080/models\").then(res => res.json()).then(data => {\n      setModels(data.models);\n    });\n  }\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog, {\n      user: \"arquant-user\",\n      message: `${input}`\n    }];\n    setInput(\"\");\n    setChatLog(chatLogNew);\n\n    //Fetch response to the api, combining the chat log array of messages \n    //and sending it as a message to localhost 3000 as a post\n    const messages = chatLogNew.map(message => message.message).join(\"\\n\");\n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: messages,\n        currentModel,\n        temperature\n      })\n    });\n    const data = await response.json();\n    await setChatLog([...chatLogNew, {\n      user: \"gpt\",\n      message: `${data.message}`\n    }]);\n    console.log(data.message);\n  }\n\n  //Creates the sideMenu. Also gets the models of IA and displays it in a select\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"arqlogo\",\n        src: arquant\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"side-menu-button\",\n        onClick: clearChat,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), \"Nuevo Chat\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modelIA\",\n        children: \"Modelo de IA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"models\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"type-of-model\",\n          onChange: e => setCurrentModel(e.target.value),\n          children: models.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: model.id,\n            children: model.id\n          }, model.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modelIA\",\n        children: \"Temperatura\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"models project\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"1\",\n          id: \"type-of-model\",\n          onChange: e => setCurrentTemp(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aside-continum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-input-holder\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              rows: \"1\",\n              className: \"chat-input-text-area\",\n              value: input,\n              onChange: e => setInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n//Gets the input message and sets the logo for each user with the message in screen.\n_s(App, \"ZKLrpxttP4V/fHO1dV2O5sntUss=\");\n_c = App;\nexport default App;\nconst ChatMessage = _ref => {\n  let {\n    message\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-message\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `avatar ${message.user == \"gpt\" && \"chatgpt\"}`,\n        children: [message.user == \"arquant-user\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logochat,\n          alt: \"arquser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 108\n        }, this), \" \", message.user == \"gpt\" && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: chatgptimg,\n          alt: \"ai\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 170\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_c2 = ChatMessage;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"ChatMessage\");","map":{"version":3,"names":["arquant","chatgptimg","logochat","useState","useEffect","App","getEngines","input","setInput","models","setModels","currentModel","setCurrentModel","temperature","setCurrentTemp","chatLog","setChatLog","user","message","clearChat","fetch","then","res","json","data","handleSubmit","e","preventDefault","chatLogNew","messages","map","join","response","method","headers","body","JSON","stringify","console","log","target","value","model","id","index","ChatMessage"],"sources":["/Users/augustoocchiuzzi/Desktop/AUGUSTO/PROGRAMACION/NetBeansProjects/arquant/chatGpt/arquantGPT/client/src/App.js"],"sourcesContent":["import arquant from './img/logo-b.svg';\nimport chatgptimg from './img/chatgpt.svg';\nimport logochat from './img/logochat.png';\nimport   { useState, useEffect } from 'react';\nimport './css/App.css';\nimport './css/normalize.css';\n\n\nfunction App() {\n\n  useEffect(()=> {\n    getEngines();\n  }, [])\n\n  //Add state for input and chat log\n\n  const [input, setInput] = useState(\"\");\n  const [models, setModels] = useState([]);\n  const [currentModel, setCurrentModel] = useState(\"ada\");\n  const [temperature, setCurrentTemp] = useState(\"0\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"CÃ³mo puedo ayudarte hoy?\"\n  }])\n\n  //Clear chat\n  function clearChat() {\n    setChatLog([]);\n  }\n\n  function getEngines() {\n    fetch(\"http://localhost:3080/models\")\n      .then(res => res.json())\n      .then(data => { \n        setModels(data.models)});\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let chatLogNew = [...chatLog, {user: \"arquant-user\", message: `${input}`}];\n    setInput(\"\");\n    setChatLog(chatLogNew)\n\n    //Fetch response to the api, combining the chat log array of messages \n    //and sending it as a message to localhost 3000 as a post\n    const messages = chatLogNew.map((message) => message.message)\n    .join(\"\\n\");\n\n    const response = await fetch(\"http://localhost:3080/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: messages,\n        currentModel,\n        temperature,\n      })\n    });\n    const data = await response.json();\n    await setChatLog([...chatLogNew, {user: \"gpt\", message: `${data.message}`}])\n    console.log(data.message);\n  }\n  \n  //Creates the sideMenu. Also gets the models of IA and displays it in a select\n  return (\n    <div className=\"App\">\n      <aside className=\"menu\">\n        <img alt=\"arqlogo\" src={arquant}/>\n        <div className='side-menu-button' onClick={clearChat}>\n          <span>+</span>\n          Nuevo Chat\n        </div>\n        <div className=\"modelIA\">\n          Modelo de IA\n        </div>\n        <div className='models'>\n          <select id=\"type-of-model\" onChange={(e) => setCurrentModel(e.target.value)}>\n            {models.map((model) => (\n              <option key={model.id} value={model.id}>{model.id}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"modelIA\">\n          Temperatura\n        </div>\n        <div className=\"models project\">\n          <input type=\"range\" min=\"0\" max=\"1\" id=\"type-of-model\" onChange={(e) => setCurrentTemp(e.target.value)} />\n          <div className=\"bar\"></div>\n      </div>\n      </aside>\n      <section className=\"chatbox\">\n        <div className='chat-log'>\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n        </div>\n        <div className=\"container-footer\">\n          <div className='aside-continum'></div>\n          <div className='chat-input-holder'> \n            <form onSubmit={handleSubmit}>\n              <input rows=\"1\" className='chat-input-text-area' value={input} onChange={(e)=> setInput(e.target.value)}/>\n            </form>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\n//Gets the input message and sets the logo for each user with the message in screen.\nexport default App;\nconst ChatMessage = ({message}) => {\n  return (\n    <div className='chat-message'>\n      <div className='chat-message-center'>\n          <div className={`avatar ${message.user == \"gpt\" && \"chatgpt\"}`}>{message.user==\"arquant-user\" && <img src={logochat} alt=\"arquser\" />} {message.user==\"gpt\" && <img src={chatgptimg} alt=\"ai\" />}</div>\n          <div className='message'>{message.message}</div>\n      </div>\n    </div>   \n  );\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}